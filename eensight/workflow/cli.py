# -*- coding: utf-8 -*-

# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

import click 
from mlflow.tracking import MlflowClient

from eensight.io import DataCatalog
from eensight.utils import load_configuration
from eensight.workflow.steps import PreprocessStep


CONTEXT_SETTINGS = dict(help_option_names=["-h", "--help"])

COMMAND_HELP = """Performs the data preprocessing stage."""
CATALOG_HELP = """The name of the yaml file to use as the data catalog"""
ML_STAGE_HELP = """The type of the processed data: `train`, `val` or `test`"""
PARAM_HELP = """The name of the yaml file to use for parameter configuration"""
CONF_PATH_HELP = """The path to the configuration directory"""
REQ_HELP = """One or more tuples that associate a dataset that is required input for 
this steps's `execute` method with a dataset name in the program's data catalog"""
PROV_HELP = """One or more tuples that associate a dataset that is generated by this 
step with a dataset name in the program's data catalog"""
LD_RUN_ID_HELP = """The MLflow run ID to load the data from."""
EN_TRACK_HELP = """Enables MLflow tracking of parameters, metrics and artifacts"""
EXP_HELP = """The name of the experiment. If it cannot be found at `tracking_uri`,
a new one will be created. Defaults to 'Default'"""
TRACK_URI_HELP = """Address of local or remote MLflow tracking server.
If not provided, defaults to `file:<save_dir>`"""
SAVE_DIR_HELP = """A path to a local directory where the MLflow runs get saved.
Defaults to `outputs/${catalog.site_name}/mlruns` if `tracking_uri` is not 
provided. Has no effect if `tracking_uri` is provided."""
TAG_HELP = """Add one or more tags to the MLflow run"""


@click.group(context_settings=CONTEXT_SETTINGS, name=__file__)
def cli():
    """Command line tools for running an eensight workflow."""




@cli.command('preprocess', help=COMMAND_HELP)
@click.option("--catalog", help=CATALOG_HELP, required=True, type=str)
@click.option("--ml-stage", help=ML_STAGE_HELP, required=True, type=str)
@click.option("--parameters", help=PARAM_HELP, default='default', type=str)
@click.option("--config-path", help=CONF_PATH_HELP, default=None, type=click.Path())
@click.option("--requires", help=REQ_HELP, default=None, multiple=True, type=click.Tuple([str, str]))
@click.option("--provides", help=PROV_HELP, default=None, multiple=True, type=click.Tuple([str, str]))
@click.option("--load-run-id", help=LD_RUN_ID_HELP, default=None, type=str)
@click.option("--enable-tracking", help=EN_TRACK_HELP, is_flag=True)
@click.option("--experiment", help=EXP_HELP, default='Default', type=str)
@click.option("--tracking-uri", help=TRACK_URI_HELP, default=None, type=str)
@click.option("--save-dir", help=SAVE_DIR_HELP, default=None, type=str)
@click.option("--tags", help=TAG_HELP, default=None, multiple=True, type=click.Tuple([str, str]))
def preprocess_data(catalog, ml_stage, parameters='default', config_path=None, 
                        requires=None, provides=None, load_run_id=None,
                        enable_tracking=None, experiment=None,
                        tracking_uri=None, save_dir=None, tags=None
):    
    cfg = load_configuration(catalog=catalog, parameters=parameters, 
                config_path=config_path, tracking_uri=tracking_uri,            
                save_dir=save_dir
    ) 
    
    run_id = None
    if enable_tracking:
        client = MlflowClient(cfg.tracking_uri)
        try:
            experiment_id = client.create_experiment(experiment)
        except:
            experiment_id = client.get_experiment_by_name(experiment).experiment_id
        mlrun = client.create_run(experiment_id=experiment_id)
        run_id = mlrun.info.run_id
    
    data_catalog = DataCatalog.from_config(catalog=cfg.catalog, data_dir=cfg.data_dir,
                    load_versions=load_run_id, save_version=run_id, ml_stages=[ml_stage]
    )
    parameters = cfg.parameters.preprocess
    rebind = cfg.catalog.rebind_names
    requires = dict() if requires is None else dict(requires)
    provides = dict() if provides is None else dict(provides)
    
    preprocess = PreprocessStep(data_catalog, parameters, 
                    ml_stage=ml_stage, rebind=rebind,
                    requires=requires, provides=provides,
                    run_id=run_id, tracking_uri=cfg.tracking_uri,
                    experiment_name=experiment, tags=tags
    )
    preprocess()
    

                       

if __name__ == "__main__":
    cli()

